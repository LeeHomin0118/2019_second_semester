#define _CRT_SECURE_NO_WARNINGS
#include <stdio.h>
#include <math.h>
/*
비트 마스킹을 이용해서 저장하면
1101 0100 = 212
1111 0110 = 246
1101 1000 = 216
1101 0000 = 208
0100 0000 = 64
0001 1011 = 27
0000 0001 = 1
0000 1000 = 8
0001 0010 = 18
1100 0000 = 192
0001 0110 = 22
0001 0001 = 17
0101 0100 = 84
0110 0001 = 97
0100 0001 = 65
0011 0001 = 49
0001 0100 = 20
1001 0100 = 148
1101 1000 = 216
0111 1001 = 121
1101 0011 = 211
0100 1100 = 76
1110 0000 = 224
0000 0000 = 0
1000 0101 = 133
1001 1001 = 153
0101 1001 = 89

0000 - 1
0001 - 2
0010 - 3
0100 - 4
1000 - 5
0011 - 6
0101 - 7
1001 - 8
1010 - 9
1100 - 10
0110 - 11
0111 - 12
1110 - 13
1101 - 14
1011 - 15
1111 - 16

212246216208064827001008018192022017084097065049020148216121211076224000133153089

1101 0100 1111 0110 1101 1000 1101 0000 0100 0000 0001 1011 0000 0001 0000 1000 0001 0010 1100 0000 0001 0110 0001 0001 0101 0100 0110 0001 0100 0001 0011 0001 0001 0100 1001 0100 1101 1000 0111 1001 1101 0011 0100 1100 1110 0000 0000 0000 1000 0101 1001 1001 0101 1001
110101001111011011011000110100000100000000011011000000010000100000010010110000000001011000010001010101000110000101000001001100010001010010010100110110000111100111010011010011001110000000000000100001011001100101011001

이런식으로 27바이트 216비트로 저장이 가능하다.
허프만 암호화를 이용하면 해당 미로는 24바이트 192비트로 저장이 가능하지만 이것도 빈도수에 따라 달라짐 + 허프만 암호화는 아직 구현하지 못함;;;

192bit
24바이트

*/
int main() {
	unsigned char maze[27] = { 212, 246, 216, 208, 64, 27, 1, 8, 18, 192, 22, 17, 84, 97, 65, 49, 20, 148, 216, 121, 211, 76, 224, 0, 133, 153, 89 };
	wchar_t arr[12][2] = { 0 };
	arr[0][0] = 34221;
	arr[0][1] = 1442;
	arr[1][0] = 11423;
	arr[1][1] =	1142;
	arr[2][0] =	23421;
	arr[2][1] = 1121;
	arr[3][0] = 11311;
	arr[3][1] = 1213;
	arr[4][0] = 34111;
	arr[4][1] = 4122;
	arr[5][0] = 21121;
	arr[5][1] = 1222;
	arr[6][0] = 11223;
	arr[6][1] = 4122;
	arr[7][0] = 12211;
	arr[7][1] = 3221;
	arr[8][0] = 24231;
	arr[8][1] = 4243;
	arr[9][0] = 41421;
	arr[9][1] = 1121;
	arr[10][0] = 11143;
	arr[10][1] = 1221;
	arr[11][0] = 32323;
	arr[11][1] = 2232;
	for (int i = 0; i < 19; i++) {
		if (i % 2 == 0) printf("+");
		else printf("%c%c%c", 6, 6, 6);
	}
	printf("\n");
	int tmp = 0;
	double powck = 1;
	for (int i = 0; i < 12; i++) {
		tmp = 0;
		powck = 1;
		for (int j = 0; j < 9; j++) {
			if (j == 5) {
				tmp = 1;
				powck = 1;
			}
			int tmpnum = arr[i][tmp] % int(pow(10, powck)) / pow(10, powck - 1);
			powck++;
			if (tmpnum == 1) {
				printf("%c   ", 5);
				continue;
			}
			if (tmpnum == 2) {
				printf("    ");
				continue;
			}
			if (tmpnum == 3) {
				printf("%c   ", 5);
				continue;
			}
			if (tmpnum == 4) {
				printf("    ");
				continue;
			}
		}
		printf("%c\n", 5);
		tmp = 0;
		powck = 1;
		for (int j = 0; j < 9; j++) {
			if (j == 5) {
				tmp = 1;
				powck = 1;
			}
			int tmpnum = arr[i][tmp] % int(pow(10, powck)) / pow(10, powck - 1);
			powck++;
			if (tmpnum == 1) {
				printf("+   ");
				continue;
			}
			if (tmpnum == 2) {
				printf("+%c%c%c", 6, 6, 6);
				continue;
			}
			if (tmpnum == 3) {
				printf("+%c%c%c", 6, 6, 6);
				continue;
			}
			if (tmpnum == 4) {
				printf("+   ");
				continue;
			}
		}
		printf("+\n");
	}
	printf("\nsize of array : %d\n", sizeof(arr));
}